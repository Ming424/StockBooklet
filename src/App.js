import {
  Row,
  Col,
  Container,
} from "react-bootstrap/";
import Chart from "react-apexcharts";
import ReactApexChart from "react-apexcharts";
import React, { useState, useEffect } from "react";
import "./App.css";
import Sidebar from "./components/Sidebar";
import Header from "./components/Header";
import StockProfile from "./components/StockProfile";
import StockPosts from "./components/StockPosts";
import WatchesModal from "./components/WatchesModal";
import uuid from "uuid-v4";
import axios from "axios";
// https://react-icons.github.io/react-icons/icons?name=fi

// API
const finnhubtoken = process.env.REACT_APP_FINNHUB_APIKEY;
const url = "https://finnhub.io/api/v1";

const round = (val) => {
  return val ? +val.toFixed(2) : null;
};

const directionEmojis = {
  up: "⬆️",
  down: "⬇️",
  "": "",
};

function App() {
  const online = true;

  // TIMESTAMP
  const [from, setFrom] = useState(-1);
  const [to, setTo] = useState(-1);

  // GRAPH
  const [series, setSeries] = useState([
    {
      data: [],
    },
  ]);
  const [seriesVol, setSeriesVol] = useState([
    {
      data: [],
    },
  ]);

  // PROFILE - TO MONGO
  const [watches, setWatches] = useState([
    {
      grp: "Test",
      lists: [
        { sym: "TSLA", quote: {} },
        { sym: "AAPL", quote: {} },
      ],
    },
    {
      grp: "Favorite",
      lists: [
        { sym: "TSLA", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AMZN", quote: {} },
      ],
    },
    {
      grp: "Long",
      lists: [
        { sym: "MSFT", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
        { sym: "AAPL", quote: {} },
      ],
    },
  ]);
  const [currentWatchList, setCurrentWatchList] = useState(0);
  const [watchesSettingModal, setWatchesSettingModal] = useState(false);
  const [user] = useState({
    username: "Thierry",
    hideUsername: false,
    darkMode: false,
    defaultDiagram: 0,
  });

  // STOCK
  const [symbol, setSymbol] = useState("");
  const [quote, setQuote] = useState({});
  const [companyProfile, setCompanyProfile] = useState({});
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(false);

  const { c, h, l, o, pc, t } = quote;
  const {
    country,
    currency,
    exchange,
    finnhubIndustry,
    ipo,
    logo,
    marketCapitalization,
    shareOutstanding,
    name,
    weburl,
    ticker,
  } = companyProfile;

  // YAHOO
  // const proxyUrl = "https://cors-anywhere.herokuapp.com/";
  // const stockUrl = `${proxyUrl}https://query1.finance.yahoo.com/v8/finance/chart/`;

  async function fetchGraph() {
    if (online) {
      const resolution = 1;
      // const f = 1650375000
      // const t = 1650398400
      const now = Math.floor(Date.now() / 1000);
      const marketOpen = new Date();
      marketOpen.setHours(9, 30, 0, 0);
      const o = marketOpen.getTime() / 1000;
      // console.log(new Date(o * 1000))
      const marketClose = new Date();
      marketClose.setHours(16, 0, 0, 0);
      const c = marketClose.getTime() / 1000;
      // console.log(new Date(c * 1000))
      let f = -1;
      let t = -1;
      if (now < o) {
        console.log("not open yet, get yesterday");
        f = o - 3600 * 24;
        t = c - 3600 * 24;
      } else if (now > c) {
        console.log("after market");
        f = o;
        t = c;
      } else {
        console.log("market open");
        f = o;
        t = now;
      }
      // console.log(new Date(f * 1000));
      // console.log(new Date(t * 1000));
      // console.log("GETTING GRAPH => " + symbol);
      const res = await axios.get(
        `${url}/stock/candle?symbol=${symbol}&resolution=${resolution}&from=${f}&to=${t}&token=${finnhubtoken}`
      );
      console.log(res.data);
      return res.data;
    } else {
      const data = {
        c: [
          1006.45, 1002.355, 1003.97, 1003.6, 1007.05, 1001.8, 1001.84,
          1002.995, 1001.49, 999, 998.215, 998, 1002.31, 1000.97, 1001.34,
          1000.64, 1005.34, 1012, 1010, 1009, 1007.55, 1010.14, 1010.5, 1011.22,
          1010, 1013.87, 1017, 1018, 1018.52, 1019.34, 1018.24, 1017.96,
          1018.86, 1018.03, 1018.39, 1018.4, 1021.21, 1020.82, 1021.86, 1020,
          1021.92, 1022.84, 1021, 1020, 1019.5, 1018.17, 1019.56, 1020.5,
          1021.5, 1020.23, 1019.97, 1020.55, 1019.8, 1020.03, 1018.79, 1018.1,
          1018.66, 1018.63, 1018.1, 1016.5, 1017.21, 1017.42, 1018.14, 1017,
          1017.73, 1017.4, 1017.97, 1019.15, 1020.4, 1024.11, 1025.35, 1025.56,
          1027.21, 1028, 1027.68, 1027.67, 1029.13, 1029.55, 1028.97, 1030.16,
          1031.11, 1030.6, 1029.27, 1029, 1028.83, 1028.41, 1029.99, 1029.62,
          1029.9, 1029.53, 1028.27, 1027.82, 1027.33, 1028.06, 1028, 1027.55,
          1028.5, 1029.9, 1029.96, 1028.11, 1028.54, 1027.57, 1026.63, 1027,
          1026.85, 1028.5, 1027.32, 1026.98, 1026.77, 1027, 1027.47, 1028.2,
          1029, 1029.8, 1030.41, 1030.17, 1028.5, 1027.98, 1027.48, 1027.43,
          1026, 1027.42, 1027.7, 1027.54, 1028.67, 1028.98, 1028.175, 1028.82,
          1029.05, 1032.6, 1032.55, 1033.13, 1033.91, 1034.66, 1034, 1033.35,
          1032.28, 1032, 1031.39, 1032, 1032.46, 1032.59, 1031.23, 1031,
          1030.86, 1028.9, 1029.2, 1029.45, 1028.5, 1029.05, 1027.89, 1027.74,
          1027.75, 1028.34, 1028, 1027.91, 1028, 1028.2, 1029.5, 1028.8,
          1028.49, 1028.59, 1028.63, 1028.01, 1027.66, 1025.6, 1026.65, 1025.4,
          1027.7, 1028.79, 1027.83, 1027.82, 1027.76, 1028.13, 1027.72, 1028.08,
          1027.13, 1027.5, 1026.45, 1026.145, 1024.36, 1026, 1025.97, 1026.5,
          1025.25, 1025.5, 1025.05, 1024.15, 1024, 1024.25, 1023.57, 1024.66,
          1024.57, 1024.39, 1025.1, 1024.98, 1025.5, 1025.6, 1026.46, 1026.81,
          1025.5, 1028.75, 1028.35, 1028.53, 1027.51, 1027.12, 1026.63, 1027,
          1027.09, 1026.51, 1026, 1026.08, 1027.28, 1028.08, 1028.27, 1027.61,
          1029, 1027.25, 1027.09, 1026.79, 1026, 1026.26, 1026.47, 1026.38,
          1025.99, 1026.19, 1025.47, 1024.26, 1025.1, 1025, 1024.92, 1024.54,
          1023.75, 1023.8, 1023.19, 1021.48, 1020.44, 1019.99, 1019.61, 1020.61,
          1021.51, 1021, 1021.46, 1022.24, 1021.84, 1021.7, 1022.58, 1022.83,
          1023, 1022.74, 1021.52, 1021.35, 1021.3, 1021.12, 1020.7, 1019.82,
          1021.63, 1021.28, 1023.5, 1024.78, 1025.9, 1026.57, 1026.4, 1025.94,
          1026.55, 1026, 1026.5, 1027.86, 1027.78, 1026.56, 1027.02, 1026.51,
          1025.61, 1025, 1025.6, 1026.1, 1024.67, 1024.25, 1025.28, 1025.27,
          1023.9, 1022.03, 1022.1, 1021.5, 1021.81, 1018.08, 1019.5, 1019.5,
          1018.85, 1019.71, 1019.39, 1019.1, 1019.58, 1019.76, 1020.73, 1018.79,
          1020.12, 1020.08, 1020.94, 1021.46, 1022.99, 1022.08, 1022.15,
          1022.01, 1021.51, 1023.17, 1022, 1023, 1023.99, 1024.91, 1024.02,
          1023.95, 1023.96, 1024, 1024.64, 1025.15, 1024.54, 1023.61, 1023.52,
          1023.72, 1024.93, 1024.17, 1023.97, 1024, 1024.13, 1024.54, 1024.65,
          1024.6, 1023.76, 1024.68, 1025.49, 1024.88, 1023.15, 1022.78, 1022.68,
          1022.79, 1022.665, 1023, 1025.5, 1026.25, 1027.11, 1027.22, 1027.38,
          1026.96, 1027.6, 1027.28, 1028.29, 1027.01, 1027.65, 1027.5, 1027.43,
          1028.17, 1028.68, 1028.26, 1029, 1029.09, 1029, 1028.04, 1028.51,
          1028.1, 1028.77, 1027.61, 1027.75, 1026.69, 1025.75, 1025.75, 1025.51,
          1025.61, 1026.43, 1025.94, 1024.71, 1025.4, 1024.79, 1024.59, 1024.79,
          1024.63, 1024.35, 1024.755, 1026.63, 1026.06, 1027.2, 1029, 1027.545,
          1027.51, 1025.75, 1025.46, 1026.195, 1026.43, 1027.23, 1028.1,
          1026.93,
        ],
        h: [
          1006.84, 1008.67, 1004, 1004.89, 1011, 1007.58, 1003.88, 1004.53,
          1002.46, 1001.74, 998.215, 998.43, 1002.31, 1003.59, 1003.7, 1002.33,
          1008, 1012, 1011.04, 1011.11, 1009.66, 1011.6, 1013, 1011.47, 1011.94,
          1014.23, 1020, 1018.52, 1019.27, 1020.09, 1020, 1020.25, 1019.65,
          1019.24, 1019.5, 1018.5, 1021.64, 1022.5, 1022.5, 1021.86, 1022, 1023,
          1023.08, 1021.46, 1020.7, 1020.56, 1020, 1021.035, 1022.1, 1021.49,
          1020.75, 1021.35, 1021, 1020.53, 1020.44, 1019.13, 1018.87, 1020,
          1018.15, 1017.5, 1017.21, 1018.41, 1018.48, 1018.4, 1017.73, 1017.51,
          1018.02, 1019.15, 1020.53, 1024.3, 1025.56, 1025.65, 1027.21,
          1028.255, 1028.15, 1028.95, 1029.29, 1029.64, 1029.83, 1030.47,
          1031.11, 1032.02, 1030.63, 1029.145, 1029.3, 1029.05, 1029.99, 1030.5,
          1030.2, 1029.9, 1029.5, 1028.55, 1028.3, 1028.28, 1028.39, 1028.26,
          1028.6, 1029.9, 1030.1, 1029.855, 1029.03, 1028.69, 1028, 1027,
          1027.65, 1028.5, 1029.5, 1027.42, 1026.77, 1027, 1027.69, 1028.2,
          1029.65, 1029.8, 1030.85, 1030.68, 1030.7, 1028.77, 1027.76, 1027.9,
          1027.95, 1027.72, 1027.78, 1027.78, 1028.67, 1029.35, 1029.5, 1029,
          1029.6, 1032.6, 1033, 1033.33, 1034.07, 1034.86, 1034.3, 1034.17,
          1033.35, 1032.34, 1032.275, 1032, 1032.94, 1032.6, 1032.68, 1031.56,
          1031.2, 1030.39, 1029.57, 1029.45, 1029.5, 1029.17, 1029.29, 1028.89,
          1029, 1028.5, 1028.03, 1028.15, 1028, 1028.53, 1030, 1029.36, 1028.63,
          1028.59, 1029, 1028.32, 1027.66, 1027.92, 1026.65, 1026.13, 1028,
          1029.53, 1029, 1028, 1028, 1028.27, 1028.2, 1028.2, 1027.63, 1027.5,
          1027.45, 1026.37, 1026.36, 1026, 1026.12, 1026.62, 1026.85, 1025.5,
          1025.5, 1024.75, 1024.1, 1024.6, 1024.4, 1024.66, 1024.76, 1025,
          1025.69, 1025.01, 1025.83, 1025.745, 1026.46, 1026.81, 1026.05,
          1028.75, 1028.39, 1028.73, 1029, 1027.49, 1026.795, 1027, 1027.09,
          1026.98, 1026.75, 1026.45, 1027.5, 1028.38, 1029, 1028.02, 1029.19,
          1028.52, 1027.83, 1027.9, 1026.61, 1026.26, 1026.47, 1026.87, 1026.8,
          1026.25, 1026.11, 1025.19, 1025.1, 1025.5, 1025.29, 1024.97, 1024.66,
          1024.31, 1024, 1023.25, 1021.65, 1020.95, 1020.81, 1020.61, 1021.51,
          1021.76, 1021.83, 1022.32, 1022.5, 1021.7, 1022.58, 1023.01, 1023.25,
          1022.74, 1022.74, 1021.48, 1021.61, 1021.21, 1021.3, 1021.12, 1021.63,
          1021.61, 1023.5, 1024.86, 1026.34, 1026.79, 1026.99, 1026.41, 1026.98,
          1026.52, 1026.5, 1028.35, 1028.4, 1027.97, 1027.02, 1027.07, 1026.12,
          1026.03, 1025.87, 1026.1, 1026.5, 1024.64, 1025.28, 1025.32, 1025.28,
          1024, 1022.505, 1022.1, 1022.38, 1021.52, 1019.61, 1019.5, 1019.9,
          1020, 1019.52, 1019.53, 1019.88, 1020.43, 1020.97, 1020.69, 1020.26,
          1020.88, 1020.94, 1021.7, 1023, 1023.49, 1022.15, 1022.02, 1021.7,
          1023.17, 1022.83, 1023, 1024, 1025.3, 1024.75, 1024.22, 1024.31,
          1024.77, 1025.17, 1025.15, 1025.64, 1024.59, 1024.6, 1024.11, 1025,
          1025.76, 1024.74, 1024.16, 1024.32, 1024.54, 1024.65, 1025, 1024.75,
          1024.75, 1025.49, 1025.01, 1025.1, 1023.32, 1023.07, 1023.19, 1022.71,
          1023, 1025.5, 1026.73, 1027.33, 1027.97, 1027.665, 1028, 1028.02,
          1027.71, 1028.29, 1028.25, 1027.65, 1027.5, 1028.18, 1028.5, 1029.25,
          1028.77, 1029, 1029.57, 1029.1, 1028.75, 1028.51, 1028.59, 1028.85,
          1028.64, 1027.98, 1028.37, 1026.77, 1026.34, 1025.97, 1025.81,
          1027.03, 1026.5, 1025.55, 1025.65, 1025.74, 1025.09, 1024.79, 1025.12,
          1025.14, 1024.755, 1026.71, 1027.025, 1028.55, 1029.03, 1029, 1027.78,
          1027.98, 1025.99, 1026.36, 1026.55, 1027.41, 1029, 1028.19,
        ],
        l: [
          1003.75, 1001.46, 999.5, 1000.01, 1003.61, 1001.64, 1000.3, 1001.315,
          1000.1, 997.77, 995.4, 996.5, 997.33, 1000.97, 1000.94, 1000.11,
          1000.5, 1004.5, 1007.93, 1008.7, 1007.36, 1007.11, 1009.5, 1010,
          1009.35, 1009.18, 1012.74, 1017.35, 1017.755, 1018.5, 1016.66, 1017.3,
          1017.98, 1018, 1017.97, 1016.86, 1018.73, 1020.26, 1020.865, 1019.25,
          1020.29, 1021.46, 1020.5, 1020, 1019.5, 1018, 1017.54, 1019.58, 1020,
          1019.8, 1019, 1020.49, 1019.61, 1019.36, 1017.91, 1018.1, 1017.37,
          1017.5, 1017.4, 1015.6, 1015.94, 1017.08, 1017.36, 1016.5, 1016.82,
          1017.02, 1016.5, 1018.21, 1019.02, 1020.5, 1023.78, 1024.9, 1025.75,
          1027, 1027.29, 1027.39, 1027.86, 1028.65, 1028.97, 1029.23, 1029.5,
          1030.6, 1029.1, 1028.02, 1028, 1027.5, 1028.39, 1029.62, 1029.66,
          1029.16, 1027.9, 1027.6, 1027.08, 1027.11, 1027.35, 1027.34, 1027.5,
          1028.35, 1029.5, 1027.56, 1027.96, 1027.57, 1026.56, 1026.19, 1026.5,
          1026.775, 1027.32, 1026.45, 1025.34, 1026.41, 1026.98, 1027.13,
          1028.01, 1029, 1029.76, 1030, 1028.5, 1027.86, 1027.11, 1026.8, 1026,
          1025.79, 1027.21, 1027.5, 1027.81, 1028.67, 1028.175, 1027.8, 1029,
          1029, 1032, 1032.39, 1032.89, 1033.73, 1033.79, 1032.8, 1032.08,
          1031.69, 1031.39, 1031.34, 1031.16, 1032, 1031.1, 1031, 1030.51,
          1028.04, 1028.89, 1029, 1028.3, 1028.425, 1027.23, 1027.7, 1027.615,
          1027.75, 1027.88, 1027.59, 1028, 1028.03, 1028.69, 1028.8, 1028.49,
          1028, 1028.61, 1027.75, 1027.25, 1025.5, 1025.71, 1025.4, 1025.5,
          1028.14, 1027.6, 1027.48, 1027.675, 1027.71, 1027.42, 1027.36, 1027,
          1026.5, 1026.45, 1025.75, 1024.36, 1024.49, 1025.67, 1026.2, 1025.25,
          1024.8, 1024.8, 1023.77, 1023.59, 1024.25, 1023.28, 1023.75, 1024.08,
          1024.39, 1024.8, 1024.5, 1025.5, 1025.25, 1025.92, 1025.85, 1025.5,
          1025.98, 1028, 1028, 1027.51, 1026.8, 1026.61, 1026.79, 1026.5,
          1026.51, 1025.5, 1025.92, 1026.22, 1027.75, 1028.19, 1027.61, 1028.23,
          1027.04, 1027.08, 1026.79, 1025.12, 1026.09, 1025.67, 1026.05,
          1025.99, 1025.1, 1025.39, 1024.25, 1024.78, 1024.92, 1024.5, 1024.14,
          1023.75, 1023.37, 1023.19, 1021.48, 1020.35, 1019.5, 1019.61, 1019.01,
          1020.52, 1021, 1020.96, 1021.77, 1021.67, 1021, 1021.87, 1022.59,
          1022.64, 1022.58, 1021.52, 1021, 1021.17, 1020.85, 1020.7, 1019.82,
          1020.44, 1021.22, 1021.98, 1023.72, 1024.9, 1025.39, 1026, 1025.7,
          1026.28, 1025.83, 1025.5, 1026.82, 1027.5, 1025.98, 1025.61, 1025.98,
          1025, 1025, 1025, 1025, 1024.45, 1023.65, 1023.7, 1023.99, 1023.89,
          1021.8, 1021, 1021.5, 1021.5, 1018.08, 1018, 1018.5, 1018.85, 1018.74,
          1018.88, 1018.55, 1018.79, 1019.45, 1019.5, 1018.79, 1018.79, 1020.08,
          1020.38, 1020.3, 1021.31, 1021.85, 1021.51, 1021.44, 1021.37, 1021.83,
          1022, 1021.5, 1022.74, 1023.79, 1024, 1023.75, 1023.8, 1024, 1024.58,
          1024, 1024.54, 1023.27, 1023.52, 1023.16, 1023.55, 1023.9, 1023.64,
          1023.265, 1023.83, 1023.89, 1023.85, 1024.43, 1023.76, 1024, 1024.37,
          1024.52, 1022.78, 1022.78, 1022.64, 1022.54, 1022.36, 1022.62,
          1023.18, 1025.6, 1025.74, 1027, 1026.82, 1026.35, 1027.5, 1027,
          1027.37, 1026.69, 1027.18, 1026.9, 1027.43, 1027.98, 1028.215,
          1028.26, 1028.5, 1028.93, 1028.79, 1027.82, 1027.3, 1027.96, 1028.09,
          1027.36, 1027.35, 1026.69, 1025.75, 1025.32, 1025.3, 1024.18, 1025.6,
          1025.81, 1024.6, 1024, 1024.64, 1023.41, 1024.19, 1024, 1024.35,
          1023.51, 1024.515, 1025.9, 1026.33, 1027.18, 1027.33, 1025.75,
          1025.75, 1024, 1025.17, 1025.7, 1026.04, 1027.14, 1025.28,
        ],
        o: [
          1004.61, 1006.45, 1002.67, 1003.87, 1004.33, 1007.06, 1001.39, 1001.5,
          1002.46, 1001.38, 998.17, 997.78, 998.25, 1002.71, 1001.02, 1001.76,
          1000.83, 1004.74, 1011.04, 1009.88, 1009.33, 1007.5, 1010.14, 1010.82,
          1011.19, 1009.18, 1013.92, 1017.35, 1017.91, 1018.89, 1019.9, 1018.24,
          1017.99, 1018.47, 1018.37, 1018.49, 1018.78, 1021.41, 1021.12,
          1021.86, 1020.52, 1021.53, 1022.83, 1021, 1020.5, 1019.53, 1018.38,
          1019.58, 1020.47, 1021.18, 1020.75, 1020.77, 1020.76, 1019.66,
          1020.17, 1018.77, 1018.65, 1018.88, 1018.15, 1017.5, 1016.72, 1017.09,
          1017.93, 1018.4, 1016.82, 1017.5, 1017.34, 1018.21, 1019.14, 1020.5,
          1024.25, 1025.24, 1025.75, 1027.13, 1027.96, 1027.75, 1027.86, 1029.3,
          1029.38, 1029.23, 1030.46, 1031.2, 1030.63, 1029.01, 1028.88, 1028.51,
          1028.76, 1029.99, 1030.2, 1029.17, 1029.13, 1028.45, 1027.71, 1027.25,
          1028.27, 1028.26, 1027.5, 1028.52, 1030, 1029.76, 1027.96, 1028.25,
          1027.5, 1027, 1026.5, 1026.93, 1028.495, 1027.21, 1026.26, 1026.595,
          1026.98, 1027.355, 1028.02, 1029.5, 1029.87, 1030.59, 1030.06,
          1028.27, 1027.76, 1027.43, 1027.06, 1026.11, 1027.21, 1027.78,
          1027.81, 1028.78, 1029.17, 1028.57, 1029.59, 1029.03, 1032.59,
          1032.56, 1033.58, 1033.73, 1034.3, 1033.855, 1033.13, 1032.34,
          1032.23, 1031.34, 1031.25, 1032.28, 1032.68, 1031.3, 1031.17, 1030.39,
          1028.9, 1029.3, 1029.4, 1028.67, 1029.29, 1027.9, 1027.74, 1028,
          1028.02, 1028.02, 1028, 1028.48, 1028.69, 1029.36, 1028.61, 1028.32,
          1028.79, 1028.32, 1027.54, 1027.92, 1025.71, 1026.13, 1025.52,
          1028.16, 1029, 1027.48, 1027.93, 1027.72, 1027.77, 1027.42, 1027.63,
          1027, 1027.45, 1026.37, 1026, 1024.71, 1026.08, 1026.5, 1026.8,
          1025.5, 1025.49, 1024.75, 1024, 1024.33, 1024.4, 1023.8, 1024.62,
          1024.4, 1024.92, 1025.01, 1025.5, 1025.34, 1025.92, 1025.94, 1026.05,
          1026, 1028.39, 1028.11, 1028.71, 1027.28, 1026.79, 1026.79, 1026.67,
          1026.98, 1026.75, 1025.92, 1026.41, 1027.75, 1028.3, 1028, 1028.23,
          1028.41, 1027.62, 1027.43, 1026.61, 1026.09, 1025.67, 1026.87,
          1026.25, 1025.79, 1026, 1025.19, 1024.79, 1024.92, 1024.9, 1024.97,
          1024.505, 1023.63, 1023.85, 1023.25, 1021.32, 1020.24, 1020.44,
          1019.5, 1020.77, 1021.57, 1020.96, 1021.97, 1022.4, 1021.5, 1021.87,
          1022.6, 1023.25, 1022.7, 1022.74, 1021.41, 1021.61, 1021, 1021.28,
          1020.7, 1020.44, 1021.31, 1021.98, 1023.72, 1024.9, 1025.62, 1026.3,
          1026.41, 1026.28, 1026.52, 1025.55, 1026.82, 1027.82, 1027.97,
          1026.26, 1027.07, 1026.12, 1025.96, 1025.19, 1025.56, 1026.1, 1024.53,
          1024.4, 1024.54, 1025.28, 1024, 1021.78, 1022.1, 1022.38, 1021.52,
          1018.39, 1018.66, 1019.28, 1018.86, 1019.43, 1019, 1019.07, 1019.45,
          1019.5, 1020.69, 1018.79, 1020.45, 1020.38, 1020.69, 1021.46, 1022.99,
          1021.95, 1022, 1021.57, 1021.83, 1022.83, 1021.78, 1023, 1024.09,
          1024.75, 1024.22, 1024, 1024.17, 1024.58, 1024.77, 1025, 1024.44,
          1023.93, 1023.38, 1023.96, 1024.94, 1024.13, 1024.16, 1024.2, 1024.2,
          1024.07, 1024.46, 1024.75, 1024.13, 1024.37, 1025.01, 1025.1, 1023.04,
          1022.75, 1022.67, 1022.71, 1022.62, 1023.18, 1025.71, 1025.95, 1027.3,
          1027, 1027.51, 1027.86, 1027.71, 1027.37, 1028.25, 1027.18, 1027.11,
          1027.69, 1027.98, 1028.215, 1028.77, 1028.5, 1028.93, 1029.08,
          1028.75, 1027.85, 1028.32, 1028.54, 1028.6, 1027.51, 1027.98, 1026.55,
          1025.5, 1025.8, 1025.27, 1025.6, 1026.23, 1025.55, 1024.89, 1025.56,
          1025.09, 1024.2, 1024.67, 1024.97, 1024.35, 1024.76, 1026.97, 1026.33,
          1027.29, 1029, 1027.39, 1027.81, 1025.54, 1025.465, 1026.16, 1026.25,
          1027.26, 1028.15,
        ],
        s: "ok",
        t: [
          1650375000, 1650375060, 1650375120, 1650375180, 1650375240,
          1650375300, 1650375360, 1650375420, 1650375480, 1650375540,
          1650375600, 1650375660, 1650375720, 1650375780, 1650375840,
          1650375900, 1650375960, 1650376020, 1650376080, 1650376140,
          1650376200, 1650376260, 1650376320, 1650376380, 1650376440,
          1650376500, 1650376560, 1650376620, 1650376680, 1650376740,
          1650376800, 1650376860, 1650376920, 1650376980, 1650377040,
          1650377100, 1650377160, 1650377220, 1650377280, 1650377340,
          1650377400, 1650377460, 1650377520, 1650377580, 1650377640,
          1650377700, 1650377760, 1650377820, 1650377880, 1650377940,
          1650378000, 1650378060, 1650378120, 1650378180, 1650378240,
          1650378300, 1650378360, 1650378420, 1650378480, 1650378540,
          1650378600, 1650378660, 1650378720, 1650378780, 1650378840,
          1650378900, 1650378960, 1650379020, 1650379080, 1650379140,
          1650379200, 1650379260, 1650379320, 1650379380, 1650379440,
          1650379500, 1650379560, 1650379620, 1650379680, 1650379740,
          1650379800, 1650379860, 1650379920, 1650379980, 1650380040,
          1650380100, 1650380160, 1650380220, 1650380280, 1650380340,
          1650380400, 1650380460, 1650380520, 1650380580, 1650380640,
          1650380700, 1650380760, 1650380820, 1650380880, 1650380940,
          1650381000, 1650381060, 1650381120, 1650381180, 1650381240,
          1650381300, 1650381360, 1650381420, 1650381480, 1650381540,
          1650381600, 1650381660, 1650381720, 1650381780, 1650381840,
          1650381900, 1650381960, 1650382020, 1650382080, 1650382140,
          1650382200, 1650382260, 1650382320, 1650382380, 1650382440,
          1650382500, 1650382560, 1650382620, 1650382680, 1650382740,
          1650382800, 1650382860, 1650382920, 1650382980, 1650383040,
          1650383100, 1650383160, 1650383220, 1650383280, 1650383340,
          1650383400, 1650383460, 1650383520, 1650383580, 1650383640,
          1650383700, 1650383760, 1650383820, 1650383880, 1650383940,
          1650384000, 1650384060, 1650384120, 1650384180, 1650384240,
          1650384300, 1650384360, 1650384420, 1650384480, 1650384540,
          1650384600, 1650384660, 1650384720, 1650384780, 1650384840,
          1650384900, 1650384960, 1650385020, 1650385080, 1650385140,
          1650385200, 1650385260, 1650385320, 1650385380, 1650385440,
          1650385500, 1650385560, 1650385620, 1650385680, 1650385740,
          1650385800, 1650385860, 1650385920, 1650385980, 1650386040,
          1650386100, 1650386160, 1650386220, 1650386280, 1650386340,
          1650386400, 1650386460, 1650386520, 1650386580, 1650386640,
          1650386700, 1650386760, 1650386820, 1650386880, 1650386940,
          1650387000, 1650387060, 1650387120, 1650387180, 1650387240,
          1650387300, 1650387360, 1650387420, 1650387480, 1650387540,
          1650387600, 1650387660, 1650387720, 1650387780, 1650387840,
          1650387900, 1650387960, 1650388020, 1650388080, 1650388140,
          1650388200, 1650388260, 1650388320, 1650388380, 1650388440,
          1650388500, 1650388560, 1650388620, 1650388680, 1650388740,
          1650388800, 1650388860, 1650388920, 1650388980, 1650389040,
          1650389100, 1650389160, 1650389220, 1650389280, 1650389340,
          1650389400, 1650389460, 1650389520, 1650389580, 1650389640,
          1650389700, 1650389760, 1650389820, 1650389880, 1650389940,
          1650390000, 1650390060, 1650390120, 1650390180, 1650390240,
          1650390300, 1650390360, 1650390420, 1650390480, 1650390540,
          1650390600, 1650390660, 1650390720, 1650390780, 1650390840,
          1650390900, 1650390960, 1650391020, 1650391080, 1650391140,
          1650391200, 1650391260, 1650391320, 1650391380, 1650391440,
          1650391500, 1650391560, 1650391620, 1650391680, 1650391740,
          1650391800, 1650391860, 1650391920, 1650391980, 1650392040,
          1650392100, 1650392160, 1650392220, 1650392280, 1650392340,
          1650392400, 1650392460, 1650392520, 1650392580, 1650392640,
          1650392700, 1650392760, 1650392820, 1650392880, 1650392940,
          1650393000, 1650393060, 1650393120, 1650393180, 1650393240,
          1650393300, 1650393360, 1650393420, 1650393480, 1650393540,
          1650393600, 1650393660, 1650393720, 1650393780, 1650393840,
          1650393900, 1650393960, 1650394020, 1650394080, 1650394140,
          1650394200, 1650394260, 1650394320, 1650394380, 1650394440,
          1650394500, 1650394560, 1650394620, 1650394680, 1650394740,
          1650394800, 1650394860, 1650394920, 1650394980, 1650395040,
          1650395100, 1650395160, 1650395220, 1650395280, 1650395340,
          1650395400, 1650395460, 1650395520, 1650395580, 1650395640,
          1650395700, 1650395760, 1650395820, 1650395880, 1650395940,
          1650396000, 1650396060, 1650396120, 1650396180, 1650396240,
          1650396300, 1650396360, 1650396420, 1650396480, 1650396540,
          1650396600, 1650396660, 1650396720, 1650396780, 1650396840,
          1650396900, 1650396960, 1650397020, 1650397080, 1650397140,
          1650397200, 1650397260, 1650397320, 1650397380, 1650397440,
          1650397500, 1650397560, 1650397620, 1650397680, 1650397740,
          1650397800, 1650397860, 1650397920, 1650397980, 1650398040,
          1650398100, 1650398160, 1650398220, 1650398280, 1650398340,
          1650398400,
        ],
        v: [
          232671, 121415, 118984, 87184, 153957, 104179, 66507, 54296, 73232,
          102859, 82195, 67359, 88556, 119925, 68748, 47264, 133885, 184931,
          100523, 89692, 56559, 111044, 117697, 78689, 44187, 140610, 207418,
          139878, 82218, 129846, 120423, 90769, 49235, 43044, 41797, 67760,
          130823, 105297, 67053, 68514, 51130, 70403, 70531, 58936, 44889,
          66066, 63707, 60485, 59419, 35014, 30462, 24572, 31057, 31266, 47889,
          28609, 40455, 57465, 25546, 81582, 33227, 47401, 24270, 22565, 21018,
          17888, 33495, 35344, 59683, 125823, 108531, 56917, 101440, 82650,
          70010, 62457, 58957, 44593, 48184, 86888, 102215, 91592, 71110, 59830,
          49343, 48491, 36201, 45493, 27589, 22912, 36301, 35346, 39215, 40358,
          17432, 14861, 34261, 29663, 48884, 60610, 28973, 22177, 43231, 33108,
          24389, 43708, 57838, 40859, 50889, 27435, 29775, 26134, 43038, 21164,
          55717, 30347, 51714, 29864, 18340, 39238, 27426, 25312, 12534, 13404,
          24026, 27983, 20640, 21722, 25019, 87244, 64245, 54064, 48135, 57069,
          29205, 30398, 31566, 24884, 20270, 19931, 29414, 16706, 18310, 16052,
          15231, 50608, 20018, 13783, 24854, 15615, 35877, 30103, 28323, 19046,
          10310, 15353, 1387, 11669, 30776, 12895, 15307, 12360, 15733, 16152,
          14824, 56294, 25246, 17664, 35592, 45246, 25000, 8141, 16576, 25537,
          13075, 16023, 8991, 11922, 10204, 22566, 44726, 32119, 18744, 43284,
          22651, 19576, 13137, 33684, 22110, 6738, 26869, 21047, 19537, 20262,
          24572, 18731, 14199, 12580, 13800, 20665, 14107, 49194, 21905, 16587,
          28016, 11808, 13027, 8520, 12300, 8598, 21584, 7910, 16813, 20751,
          24915, 15517, 27251, 18224, 7732, 14410, 30852, 7781, 9020, 11936,
          12258, 25579, 17353, 29558, 14213, 21855, 22955, 20060, 35069, 19740,
          17218, 63535, 47732, 58734, 30932, 42060, 38153, 34011, 16167, 24977,
          27170, 13855, 26961, 22042, 16487, 9037, 19560, 15399, 7818, 10521,
          15579, 19876, 14645, 8751, 37515, 31630, 47840, 50747, 26837, 15726,
          22268, 13544, 17309, 48326, 57514, 43575, 36053, 41925, 35769, 13253,
          15176, 21978, 24198, 19931, 24258, 24714, 14113, 45139, 26723, 27515,
          31892, 81498, 35020, 24374, 18934, 28192, 17640, 23099, 19208, 21587,
          27633, 31056, 38259, 13509, 25065, 44004, 44135, 38513, 19053, 13616,
          12846, 20845, 10137, 20051, 32679, 40735, 23688, 20364, 19930, 18714,
          24136, 20212, 27987, 32891, 18984, 20343, 29213, 49179, 22828, 26085,
          9249, 11009, 12983, 14794, 10734, 13229, 43169, 14123, 41639, 13718,
          15895, 22428, 19691, 9988, 50985, 67089, 53626, 37195, 34367, 64774,
          44405, 24602, 39196, 28255, 16016, 19934, 26647, 26043, 69277, 19830,
          23785, 26938, 24687, 36982, 29936, 20511, 23179, 29390, 30975, 39565,
          41252, 41337, 20293, 51920, 43901, 27954, 31713, 65614, 36674, 42030,
          21423, 38973, 29009, 34433, 59846, 44386, 90226, 63597, 63779, 47407,
          54932, 84678, 51543, 66106, 102276, 216033, 447586,
        ],
      };
      return data;
    }
  }

  useEffect(() => {
    let timeoutId;
    async function getLastestPrice() {
      console.log("(1) => useEffect.getLastestPrice " + symbol);
      try {
        const data = await fetchGraph();
        const prices = data.t.map((timestamp, index) => ({
          x: new Date((timestamp - 3600 * 4) * 1000),
          y: [data.o[index], data.h[index], data.l[index], data.c[index]].map(
            round
          ),
        }));
        setSeries([{ data: prices }]);
        setSeriesVol([{ data: data.v }]);
      } catch (error) {
        console.log(error);
      }
      timeoutId = setTimeout(getLastestPrice, 17000);
    }
    getLastestPrice();
    return () => {
      clearTimeout(timeoutId);
    };
  }, [symbol]);

  useEffect(() => {
    let timeoutId;
    async function getLastestListQuote() {
      console.log("(2) => uuseEffect.getLastestListQuote " + symbol);
      try {
        await fetchListQuote(watches[currentWatchList].lists);
        await fetchQuote();
      } catch (error) {
        console.log(error);
      }
      timeoutId = setTimeout(getLastestListQuote, 10000);
    }
    getLastestListQuote();
    return () => {
      clearTimeout(timeoutId);
    };
  }, [currentWatchList, symbol]);

  useEffect(() => {
    fetchProfile();
    fetchQuote();
    getProfileNews();
  }, [symbol]);

  useEffect(() => {
    fetchProfile();
    fetchQuote();
    fetchListQuote(watches[currentWatchList].lists);
    getProfileNews();
  }, []);

  const watchesSettingOnclick = () => {
    setWatchesSettingModal(!watchesSettingModal);
  };

  const getDate = (dt) => {
    let today = new Date();
    today.setDate(today.getDate() - dt);
    let dd = today.getDate();
    let mm = today.getMonth() + 1;
    let yy = today.getFullYear().toString();
    dd = parseInt(dd) >= 10 ? dd : `0${dd}`;
    mm = parseInt(mm) >= 10 ? mm : `0${mm}`;
    return `${yy}-${mm}-${dd}`;
  };

  let currentDt = getDate(0);
  let previousDt = getDate(2);

  const getProfileNews = async () => {
    const resNews = await axios.get(
      `https://finnhub.io/api/v1/company-news?symbol=${symbol}&from=${previousDt}&to=${currentDt}&token=${finnhubtoken}`
    );
    let counter = 0;
    let tempPosts = [];
    for (const element of resNews.data) {
      if (element.source !== "Finnhub") {
        tempPosts.push(element);
        counter++;
        if (counter >= 3) break;
      }
    }
    setPosts(tempPosts);
  };

  const fetchProfile = async () => {
    console.log("() fetchProfile " + symbol);
    setLoading(true);
    const res = await axios.get(
      `${url}/stock/profile2?symbol=${symbol}&token=${finnhubtoken}`
    );
    setCompanyProfile(res.data);
    setLoading(false);
  };

  const fetchListQuote = async (list) => {
    if (online) {
      console.log("() fetchListQuote " + list + " " + symbol);
      let tempList = [...watches];
      let temp = [];
      let cache = new Map();
      for (const element of list) {
        if (cache.has(element.sym)) {
          // element.quote = cache.get(element.sym)
          temp.push({ sym: element.sym, quote: cache.get(element.sym) });
        } else {
          const res = await axios.get(
            `${url}/quote?symbol=${element.sym}&token=${finnhubtoken}`
          );
          element.quote = res.data;
          temp.push({ sym: element.sym, quote: res.data });
          cache.set(element.sym, res.data);
        }
      }
      tempList[currentWatchList].lists = temp;
      setWatches(tempList);
    }
  };

  const fetchQuote = async () => {
    console.log("() fetchQuote " + symbol);
    const currentSym = symbol;
    const res = await axios.get(
      `${url}/quote?symbol=${symbol}&token=${finnhubtoken}`
    );
    console.log(res.data);
    setQuote(res.data);
  };

  const listItemEditOnClick = (i) => {
    console.log("listItemEditOnClick(" + i + ")");
  };

  const listItemRemoveOnClick = (i) => {
    console.log("listItemRemoveOnClick(" + i + ")");
  };

  const test = async () => {
    console.log("=========================================");
    console.log(uuid());
  };

  // CHART PARAM
  const chart = {
    options: {
      chart: {
        toolbar: {
          show: false,
        },
        zoom: {
          enabled: false,
        },
        animation: {
          enabled: false,
        },
      },
      tooltip: {
        x: {
          show: true,
          format: "MM-dd HH:mm",
        },
      },
      xaxis: {
        type: "datetime",
        tooltip: {
          enabled: true,
        },
      },
      yaxis: {
        tooltip: {
          enabled: true,
        },
      },
      dataLabels: {
        enabled: false,
      },
    },
  };

  const chartVolume = {
    options: {
      chart: {
        toolbar: {
          show: false,
        },
        zoom: {
          enabled: false,
        },
        animation: {
          enabled: false,
        },
      },
      markers: {
        size: 0,
      },
      tooltip: {
        enabled: true,
      },
      plotOptions: {
        bar: {
          dataLabels: {
            position: "top", // top, center, bottom
          },
        },
      },
      dataLabels: {
        enabled: false,
      },
      xaxis: {
        floating: true,
        axisTicks: {
          show: false,
        },
        axisBorder: {
          show: false,
        },
        labels: {
          show: false,
        },
      },
      yaxis: {
        tooltip: {
          enabled: true,
        },
      },
    },
  };

  return (
    <div className="App">
      <Header user={user} test={test} setSymbol={setSymbol} />
      <Container fluid className="content mt-0">
        <Row>
          <Col id="sidebar" sm={3}>
            <Sidebar
              watches={watches}
              setCurrentWatchList={setCurrentWatchList}
              currentWatchList={currentWatchList}
              setSymbol={setSymbol}
              watchesSettingOnclick={watchesSettingOnclick}
            />
          </Col>
          <Col id="main" sm={9}>
            <StockProfile
              quote={quote}
              companyProfile={companyProfile}
              directionEmojis={directionEmojis}
            />
            <Chart
              data-cy="quote-chart"
              style={{ padding: "0px" }}
              options={chart.options}
              series={series}
              type="candlestick"
              width="100%"
              height="50%"
            />
            <ReactApexChart
              data-cy="volume-chart"
              options={chartVolume.options}
              series={seriesVol}
              type="bar"
              height={100}
            />
            <StockPosts posts={posts} />
          </Col>
        </Row>
      </Container>
      <WatchesModal
        watchesSettingModal={watchesSettingModal}
        watchesSettingOnclick={watchesSettingOnclick}
        watches={watches}
        listItemEditOnClick={listItemEditOnClick}
        listItemRemoveOnClick={listItemRemoveOnClick}
      />
    </div>
  );
}

export default App;
